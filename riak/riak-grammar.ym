/*
 * Copyright (c) 2014 BalaBit IT Ltd, Budapest, Hungary
 * Copyright (c) 2013 Tihamer Petrovics <tihameri@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code requires {

#include "riak-parser.h"

}

%code {

#include "cfg-grammar.h"
#include "plugin.h"
}

%name-prefix "riak_"
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogDriver **instance}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_RIAK
%token KW_SERVER
%token KW_PORT
%token KW_BUCKET
%token KW_KEY
%token KW_VALUE
%token KW_MODE
%token KW_TYPE




%%

start
        : LL_CONTEXT_DESTINATION KW_RIAK
          {
            last_driver = *instance = riak_dd_new(configuration);
          }
          '(' riak_options ')' { YYACCEPT; }
        ;

riak_options
        : riak_option riak_options
        |
        ;

riak_option
        : KW_SERVER '(' string ')'
          {
            riak_dd_set_server(last_driver, $3);
            free($3);
          }
        | KW_PORT '(' LL_NUMBER ')'
          {
            riak_dd_set_port(last_driver, $3);
          }
        | KW_BUCKET '(' template_content  riak_bucket_options ')' 
          {
            riak_dd_set_bucket(last_driver, $3);
          }
        
        | KW_KEY '(' template_content ')'
          {
            riak_dd_set_key(last_driver, $3);
          }
          
        | KW_VALUE '(' template_content ')'
          {
            riak_dd_set_value(last_driver, $3);
          }
        
        | dest_driver_option
        | threaded_dest_driver_option
        | { last_template_options = riak_dd_get_template_options(last_driver); } template_option
        ;
        
riak_bucket_option
        : riak_bucket_option riak_bucket_options
        |
        ;
        
riak_bucket_options
        : KW_MODE '(' string ')' 
          {
            riak_dd_set_mode(last_driver, $3);
            free($3);
          }
        | KW_TYPE '(' string ')' 
          {
          riak_dd_set_type(last_driver, $3);
          free($3);
          }
        ;
        
        


/* INCLUDE_RULES */

%%
